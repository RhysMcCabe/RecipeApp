@page "/"
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http

<PageTitle>Index</PageTitle>

@if (recipes == null)
{
    <p><em>Loading data...</em></p>
}
else
{
    <div class="container text-white">
        <div class="text-center  row">
            <h1>Find a recipe</h1>

        </div>
        <div class="container flex py-4">
            <div class="row">
                @foreach (var recipe in recipes.recipes)
                {

                    <div class="card bg-secondary col-sm my-4 mx-2 text-white p-2" style="width: 18rem;">
                        <img class="text-center rounded" src="@recipe.image" alt="Card image cap">
                        <div class="card-body">
                            <p class="card-text">@recipe.title</p>
                        </div>
                    </div>
                }
            </div>
            <div>
                <button @onclick="GetRecipes" class="btn btn-outline-primary">Clear</button>
            </div>
        </div>


    </div>
}
@errorMessage



@code{
    private Recipes recipes;
    //private string? ingredient;
    //private List<string> inputIngredients = new List<string>();
    private string? errorMessage;

    //private void addIngredient() {

    //    if (ingredient == "" || ingredient == null || ingredient.Contains(" ") || ingredient.Length>=20)
    //    {

    //        return;
    //    }
    //    ingredient = ingredient.ToLower();

    //    if (inputIngredients.Contains(ingredient))
    //    {
    //        return;
    //    }

    //    inputIngredients.Add(ingredient);
    //    ingredient = "";



    //}

    //private void removeIngredient(string i)
    //{
    //    inputIngredients.Remove(i);

    //}

    //public void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    {
    //        addIngredient();
    //    }
    //}

    protected async Task GetRecipes(){
        try
        {
           recipes.recipes.Clear();

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }



    // lifecycle method
    protected override async Task OnInitializedAsync()
    {

        try
        {
            // CORS needs to be enabled for Web API endpoint
            recipes = await Http.GetFromJsonAsync<Recipes>("https://api.spoonacular.com/recipes/random?number=4&apiKey=a40d131d82774277bd6d8971e51266ef");

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }

    public class AnalyzedInstruction
    {
        public string name { get; set; }
        public List<Step> steps { get; set; }
    }

    public class Equipment
    {
        public int id { get; set; }
        public string name { get; set; }
        public string localizedName { get; set; }
        public string image { get; set; }
    }

    public class ExtendedIngredient
    {
        public int id { get; set; }
        public string aisle { get; set; }
        public string image { get; set; }
        public string consistency { get; set; }
        public string name { get; set; }
        public string nameClean { get; set; }
        public string original { get; set; }
        public string originalName { get; set; }
        public double amount { get; set; }
        public string unit { get; set; }
        public List<string> meta { get; set; }
        public Measures measures { get; set; }
    }

    public class Ingredient
    {
        public int id { get; set; }
        public string name { get; set; }
        public string localizedName { get; set; }
        public string image { get; set; }
    }

    public class Length
    {
        public int number { get; set; }
        public string unit { get; set; }
    }

    public class Measures
    {
        public Us us { get; set; }
        public Metric metric { get; set; }
    }

    public class Metric
    {
        public double amount { get; set; }
        public string unitShort { get; set; }
        public string unitLong { get; set; }
    }

    public class Recipe
    {
        public bool vegetarian { get; set; }
        public bool vegan { get; set; }
        public bool glutenFree { get; set; }
        public bool dairyFree { get; set; }
        public bool veryHealthy { get; set; }
        public bool cheap { get; set; }
        public bool veryPopular { get; set; }
        public bool sustainable { get; set; }
        public bool lowFodmap { get; set; }
        public int weightWatcherSmartPoints { get; set; }
        public string gaps { get; set; }
        public int preparationMinutes { get; set; }
        public int cookingMinutes { get; set; }
        public int aggregateLikes { get; set; }
        public int healthScore { get; set; }
        public string creditsText { get; set; }
        public string license { get; set; }
        public string sourceName { get; set; }
        public double pricePerServing { get; set; }
        public List<ExtendedIngredient> extendedIngredients { get; set; }
        public int id { get; set; }
        public string title { get; set; }
        public int readyInMinutes { get; set; }
        public int servings { get; set; }
        public string sourceUrl { get; set; }
        public string image { get; set; }
        public string imageType { get; set; }
        public string summary { get; set; }
        public List<object> cuisines { get; set; }
        public List<string> dishTypes { get; set; }
        public List<string> diets { get; set; }
        public List<object> occasions { get; set; }
        public string instructions { get; set; }
        public List<AnalyzedInstruction> analyzedInstructions { get; set; }
        public object originalId { get; set; }
        public string spoonacularSourceUrl { get; set; }
    }

    public class Recipes
    {
        public List<Recipe> recipes { get; set; }
    }


    public class Step
    {
        public int number { get; set; }
        public string step { get; set; }
        public List<Ingredient> ingredients { get; set; }
        public List<Equipment> equipment { get; set; }
        public Length length { get; set; }
    }

    public class Us
    {
        public double amount { get; set; }
        public string unitShort { get; set; }
        public string unitLong { get; set; }
    }


    

}