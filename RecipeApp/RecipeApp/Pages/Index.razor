@page "/"
@using System.ComponentModel.DataAnnotations;
@inject HttpClient Http

<PageTitle>Index</PageTitle>

@if (recipes == null)
{
    <p><em>Loading data...</em></p>
}
else
{
    <div class="container text-white h-100">
        <div class="text-center  row">
            <h1>Find a recipe</h1>

        </div>
        
        <div class="container py-4">
            <h3>Add ingredients</h3>
            <div class="row">
                <div class="col-6">
                    <input @bind="ingredient" @onkeydown="@Enter" type="text" class="form-control" placeholder="enter a one word ingredient" aria-label="Ingredients" aria-describedby="basic-addon2">
                </div>
                <div class="col-1">
                    <button @onclick="addIngredient" type="button" class="btn btn-outline-primary">Add</button>
                </div>
                @if(inputIngredients.Count !=0){
                    <div class="col-1">
                            <button @onclick="ClearIngredients" class="btn btn-outline-secondary">Clear</button>

                        </div>
                <div class="col-3">
                        <button @onclick="GetRecipes" class="btn btn-outline-success">Search</button>

                    </div>
                }

            </div>
            <div class="row py-4">
                    <h3>Select cuisine</h3>
                <div class="col-6">
                    <select class="form-select" @onchange="selectCuisine" aria-label="Default select example">
                    <option selected>All</option>

                    @foreach (Cuisine val in Enum.GetValues(typeof(Cuisine)))
                    {
                            <option value=@val>@val</option>
                    }
                </select>
                </div>
            </div>
        </div>





        <div class="container mt-4">
            <div class="text-dark row">
                @if (inputIngredients.Count != 0)
                {
                    @foreach (string i in inputIngredients)
                    {
                        <div class="col-1">
                            <button @onclick="()=>removeIngredient(i)" class="text-center btn btn-outline-danger rounded-3">
                                <span>@i</span>
                            </button>

                        </div>

                    }
                    
                            
                }

                        

            </div>
           
            
        </div>


        <div class="container-fluid content-row align-content-center text-center">
            @if (recipes.results.Count != 0)
            {
                <div class="row">
                        @foreach (var recipe in recipes.results)
                        {
                            <div class="col-4 my-2">

                                <div class="card bg-white h-100 fw-bold text-dark" style="width: 18rem;">
                                    <img class="text-center rounded" src="@recipe.image" alt="Card image cap">
                                        <div class="card-body">
                                            <p class="card-text">@recipe.title</p>
                                        </div>
                                </div>
                            </div>
                        }
                </div>
            }
            @if (recipes.results.Count == 0 && isFetching == false && inputIngredients.Count != 0)
        {
                <div class="text-dark bg-white fw-bold rounded p-1 m-3">
                    <h1>No results found</h1>
                </div>
            }
            @if (isFetching)
            {
                <div class="text-dark bg-white fw-bold rounded p-1 m-3">
                    <h1>@fetchingMessage</h1>
                </div>
                
            }
         
            
        </div>
           
    </div>
}
@errorMessage



@code{
    private Recipes recipes;
    private string? ingredient= "cheese";
    private List<string> inputIngredients = new List<string>();
    private string? errorMessage;
    private string? fetchingMessage = "Searching...";
    private Boolean isFetching = false;
    private string? cuisine;

    private void selectCuisine(ChangeEventArgs e)
    {
        
        cuisine = e.Value.ToString();
        
        
    }

    private void addIngredient() {

        if (ingredient == "" || ingredient == null || ingredient.Contains(" ") || ingredient.Length>=20)
        {

            return;
        }
        ingredient = ingredient.ToLower();

        if (inputIngredients.Contains(ingredient))
        {
            return;
        }

        inputIngredients.Add(ingredient);
        ingredient = "";



    }



    private void removeIngredient(string i)
    {
        inputIngredients.Remove(i);

    }


    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            addIngredient();
        }
    }

    protected async Task ClearIngredients(){
        inputIngredients.Clear();
    }

    protected async Task ClearRecipes()
    {
        recipes.results.Clear();
    }

    protected async Task GetRecipes(){
  
        try
        {
            await ClearRecipes();
            string query = "";

            foreach(string i in inputIngredients){
                query += $"{i},+";
            }

            string url = $"https://api.spoonacular.com/recipes/complexSearch?query={query}&cuisine={cuisine}&number=100&apiKey=a40d131d82774277bd6d8971e51266ef";

            Console.WriteLine(url);

            isFetching = true;
            recipes = await Http.GetFromJsonAsync<Recipes>(url);
            isFetching = false;
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }



    // lifecycle method
    protected override async Task OnInitializedAsync()
    {

        try
        {
            addIngredient();
            isFetching = true;
            // CORS needs to be enabled for Web API endpoint
            recipes = await Http.GetFromJsonAsync<Recipes>($"https://api.spoonacular.com/recipes/complexSearch?query={ingredient}&number=6&apiKey=a40d131d82774277bd6d8971e51266ef");
            isFetching = false;

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }

    }

    public enum Cuisine
    {
        African,
        American,
        British,
        Cajun,
        Caribbean,
        Chinese,
        EasternEuropean,
        European,
        French,
        German,
        Greek,
        Indian,
        Irish,
        Italian,
        Japanese,
        Jewish,
        Korean,
        LatinAmerican,
        Mediterranean,
        Mexican,
        MiddleEastern,
        Nordic,
        Southern,
        Spanish,
        Thai,
        Vietnamese
    }

    public class Result
    {
        public int id { get; set; }
        public string title { get; set; }
        public string image { get; set; }
        public string imageType { get; set; }
    }

    public class Recipes
    {
        public List<Result> results { get; set; }
        public int offset { get; set; }
        public int number { get; set; }
        public int totalResults { get; set; }
    }



    

}